{"version":3,"sources":["logo.svg","reducers/EventLogReducer.js","contexts/EventLogContext.js","components/EventLogs.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","eventLogReducer","state","action","type","events","EventLogContext","createContext","EventLogContextProvider","props","useReducer","dispatch","getData","a","fetch","then","res","json","data","catch","console","log","useEffect","Provider","value","children","useStyles","makeStyles","theme","root","padding","listItem","background","margin","leftJustify","textAlign","ConvertTimestamp","timestamp","converted","substring","DisplayEventProps","key","output","PreviousZone","NextZone","ProbeType","TestMode","TestLocation0","TestLocation1","Output","TestLocation","EventLogs","classes","useContext","className","List","map","event","i","ListItem","ListItemText","primary","UserId","secondary","Timestamp","EventKey","EventProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,qKCA9BC,EAAkB,SAACC,EAAOC,GACnC,OAAQA,EAAOC,MACX,IAAK,aACD,MAAM,GAAN,mBAAWF,GAAX,YAAqBC,EAAOE,SAChC,QACI,OAAOH,ICFNI,EAAkBC,0BA4BhBC,EA1BiB,SAAAC,GAAU,IAAD,EACVC,qBAAWT,EAAiB,IADlB,mBAC9BI,EAD8B,KACtBM,EADsB,KAG/BC,EAAO,uCAAG,sBAAAC,EAAA,sDACZC,MAAM,6EACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACHP,EAAS,CACLP,KAAM,aACNC,OAAQa,OAGfC,MAAMC,QAAQC,KATH,2CAAH,qDAgBb,OAJAC,qBAAU,WACNV,MACD,IAGC,kBAACN,EAAgBiB,SAAjB,CAA0BC,MAAO,CAACnB,SAAQM,aACrCF,EAAMgB,W,wBCnBbC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACJC,QAAS,IAEXC,SAAU,CACNC,WAAY,YACZC,OAAQ,GAEZC,YAAa,CACTC,UAAW,YAInB,SAASC,EAAiBC,GACtB,IAAIC,EAAY,GAIhB,OAHAA,GAAaD,EAAUE,UAAU,EAAG,GAAK,IAAMF,EAAUE,UAAU,EAAG,GAAK,IAAMF,EAAUE,UAAU,EAAG,GACxGD,GAAa,OAASD,EAAUE,UAAU,EAAG,IAKjD,SAASC,EAAkBC,EAAKhC,GAC5B,IAAIiC,EAAS,GAEb,OAAQD,GACJ,IAAK,aACDC,GAAU,wBAA0BjC,EAAMkC,aACxC,YAAclC,EAAMmC,SAAW,IACjC,MACJ,IAAK,eACDF,GAAU,gCAAkCjC,EAAMoC,UAChD,YAAcpC,EAAMqC,SACpB,SAAWrC,EAAMsC,cACjB,OAAStC,EAAMuC,cACf,8BAAgCvC,EAAMwC,OAAS,IACjD,MACJ,IAAK,iBACDP,GAAU,2CAA6CjC,EAAMqC,SAC3D,OAASrC,EAAMyC,aACf,8BAAgCzC,EAAMwC,OAAS,IACjD,MACJ,IAAK,uBACDP,GAAU,0CAA4CjC,EAAMyC,aAC1D,8BAAgCzC,EAAMwC,OAAS,IAMzD,OAAOP,EAqBIS,MAlBf,WACI,IAAMC,EAAU1B,IACTrB,EAAUgD,qBAAW/C,GAArBD,OAEP,OACI,yBAAKiD,UAAWF,EAAQvB,MACpB,kBAAC0B,EAAA,EAAD,KACKlD,EAAOmD,KAAI,SAACC,EAAOC,GAAR,OACR,kBAACC,EAAA,EAAD,CAAUL,UAAWF,EAAQrB,UACzB,kBAAC6B,EAAA,EAAD,CAAcC,QAASJ,EAAMK,OAAQC,UAAW3B,EAAiBqB,EAAMO,aACvE,kBAACJ,EAAA,EAAD,CAAcN,UAAWF,EAAQlB,YAAa2B,QAASrB,EAAkBiB,EAAMQ,SAAUR,EAAMS,qBCvDxGC,MARf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhE,MAAK,SAAAiE,GACjCA,EAAaC,kB","file":"static/js/main.5e0db724.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","export const eventLogReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_EVENTS':\r\n            return [...state, ...action.events];\r\n        default:\r\n            return state;\r\n    }\r\n};","import React, {createContext, useReducer, useEffect} from 'react';\r\nimport {eventLogReducer} from '../reducers/EventLogReducer';\r\n\r\nexport const EventLogContext = createContext();\r\n\r\nconst EventLogContextProvider = props => {\r\n    const [events, dispatch] = useReducer(eventLogReducer, []);\r\n\r\n    const getData = async () => {\r\n        fetch('https://ldnmnsqigb.execute-api.us-east-1.amazonaws.com/dev/hvac-eventlog/')\r\n        .then(res => res.json())\r\n        .then((data) => {\r\n            dispatch({\r\n                type: 'ADD_EVENTS',\r\n                events: data\r\n            })\r\n        })\r\n        .catch(console.log);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData();\r\n    }, []);\r\n\r\n    return (\r\n        <EventLogContext.Provider value={{events, dispatch}}>\r\n            {props.children}\r\n        </EventLogContext.Provider>\r\n    );\r\n};\r\n\r\nexport default EventLogContextProvider;","import React, {useContext} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {EventLogContext} from '../contexts/EventLogContext';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      padding: 10\r\n    },\r\n    listItem: {\r\n        background: \"lightgrey\",\r\n        margin: 1\r\n    },\r\n    leftJustify: {\r\n        textAlign: \"left\"\r\n    }\r\n}));\r\n\r\nfunction ConvertTimestamp(timestamp) {\r\n    var converted = \"\";\r\n    converted += timestamp.substring(4, 6) + \"-\" + timestamp.substring(6, 8) + \"-\" + timestamp.substring(0, 4);\r\n    converted += \" at \" + timestamp.substring(9, 17);\r\n\r\n    return converted;\r\n}\r\n\r\nfunction DisplayEventProps(key, props) {\r\n    var output = \"\";\r\n\r\n    switch (key) {\r\n        case \"ZoneChange\":\r\n            output += \"User moved from zone \" + props.PreviousZone \r\n            + \" to zone \" + props.NextZone + \".\";\r\n            break;\r\n        case \"DMMTestEvent\":\r\n            output += \"User took a DMM reading with \" + props.ProbeType \r\n            + \" to test \" + props.TestMode \r\n            + \" from \" + props.TestLocation0 \r\n            + \" to \" + props.TestLocation1 \r\n            + \" and received a reading of \" + props.Output + \".\";\r\n            break;\r\n        case \"ClampTestEvent\":\r\n            output += \"User took a clamp meter reading to test \" + props.TestMode\r\n            + \" at \" + props.TestLocation\r\n            + \" and received a reading of \" + props.Output + \".\";\r\n            break;\r\n        case \"TemperatureTestEvent\":\r\n            output += \"User took a temperature gun reading at \" + props.TestLocation \r\n            + \" and received a reading of \" + props.Output + \".\";\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return output;\r\n}\r\n\r\nfunction EventLogs() {\r\n    const classes = useStyles();\r\n    const {events} = useContext(EventLogContext);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <List>\r\n                {events.map((event, i) => (\r\n                    <ListItem className={classes.listItem}>\r\n                        <ListItemText primary={event.UserId} secondary={ConvertTimestamp(event.Timestamp)}/>\r\n                        <ListItemText className={classes.leftJustify} primary={DisplayEventProps(event.EventKey, event.EventProps)}/>\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EventLogs;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport EventLogs from './components/EventLogs';\nimport EventLogContextProvider from './contexts/EventLogContext';\n\nfunction App() {\n  return (\n    <EventLogContextProvider>\n      <EventLogs/>\n    </EventLogContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}